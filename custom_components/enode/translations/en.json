{
  "config": {
    "abort": {
      "already_configured": "Account is already configured",
      "already_in_progress": "Configuration flow is already in progress",
      "authorize_url_timeout": "Timeout generating authorize URL.",
      "missing_configuration": "The component is not configured. Please follow the documentation.",
      "no_url_available": "No URL available. For information about this error, [check the help section]({docs_url})",
      "oauth_error": "Received invalid token data.",
      "oauth_failed": "Error while obtaining access token.",
      "oauth_timeout": "Timeout resolving OAuth token.",
      "oauth_unauthorized": "OAuth authorization error while obtaining access token.",
      "user_rejected_authorize": "Account linking rejected: {error}"
    },
    "error": {
      "already_configured": "An entry is already configured with this user ID."
    },
    "create_entry": {
      "default": "Successfully authenticated"
    },
    "step": {
      "pick_implementation": {
        "title": "Pick authentication method"
      },
      "auth": {
        "data": {
          "user_id": "User ID",
          "sandbox": "Sandbox Mode"
        },
        "data_description": {
          "user_id": "User ID used to link devices. This is not the same as your Enode account email.",
          "sandbox": "Enable sandbox mode for testing purposes."
        }
      },
      "reconfigure": {
        "data": {
          "user_id": "User ID"
        },
        "description": "You're able to change the user ID used for linking future devices. Existing linked devices will not be affected.",
        "title": "Reconfigure Enode"
      }
    }
  },
  "config_subentries": {
    "user_link": {
      "initiate_flow": {
        "user": "Link a device"
      },
      "step": {
        "user": {
          "title": "Link a device"
        }
      },
      "error": {},
      "abort": {
        "user_linked": "Device has been linked"
      }
    },
    "webhook": {
      "initiate_flow": {
        "user": "Manage Webhook"
      },
      "step": {
        "user": {
          "title": "Manage Webhook",
          "menu_options": {
            "create": "Create Webhook",
            "test": "Test Webhook",
            "delete": "Delete Webhook"
          }
        }
      },
      "progress": {
        "creating_webhook": "Creating webhook with Enode",
        "create_webhook_failed": "Failed to create webhook",
        "create_webhook_succeeded": "Webhook created successfully",
        "testing_webhook": "Testing webhook the ensure the integration is working.",
        "test_webhook_succeeded": "Webhook test succeeded",
        "test_webhook_failed": "Webhook test failed",
        "deleting_webhook": "Testing failed, cleaning up the webhook.",
        "delete_webhook_succeeded": "Webhook deleted successfully",
        "delete_webhook_failed": "Failed to delete webhook"
      },
      "error": {},
      "abort": {
        "webhook_created": "Webhook has been created",
        "webhook_not_created": "Webhook could not be created",
        "external_url_unavailable": "External URL is not available. Please check your Home Assistant Network configuration."
      }
    }
  },
  "entity": {
    "sensor": {
      "charge_state_battery_level": {
        "name": "Battery Level"
      },
      "charge_state_charge_time_remaining": {
        "name": "Charge Time Remaining"
      },
      "charge_state_range": {
        "name": "Range"
      },
      "charge_state_battery_capacity": {
        "name": "Battery Capacity"
      },
      "charge_state_charge_limit": {
        "name": "Charge Limit"
      },
      "charge_state_power_delivery_state": {
        "name": "Power Delivery State",
        "state": {
          "UNKNOWN": "Unknown",
          "UNPLUGGED": "Unplugged",
          "PLUGGED_IN:INITIALIZING": "Initializing",
          "PLUGGED_IN:CHARGING": "Charging",
          "PLUGGED_IN:STOPPED": "Stopped",
          "PLUGGED_IN:COMPLETED": "Completed",
          "PLUGGED_IN:NO_POWER": "No Power",
          "PLUGGED_IN:FAULT": "Fault",
          "PLUGGED_IN:DISCHARGING": "Discharging"
        }
      },
      "charge_state_max_current": {
        "name": "Max Current"
      },
      "odometer_distance": {
        "name": "Odometer"
      },
      "smart_charging_deadline": {
        "name": "Smart Charging Deadline"
      },
      "smart_charging_minimum_charge_limit": {
        "name": "Minimum Charge Limit"
      }
    },
    "binary_sensor": {
      "charge_state_is_fully_charged": {
        "name": "Fully Charged"
      },
      "charge_state_is_plugged_in": {
        "name": "Plugged In"
      },
      "charge_state_is_charging": {
        "name": "Charging"
      },
      "smart_charging_is_enabled": {
        "name": "Smart Charging"
      }
    },
    "geo_location": {
      "location": {
        "name": "Location",
        "state": {
          "reachable": "Reachable",
          "unreachable": "Unreachable"
        }
      }
    },
    "switch": {
      "charge_state_is_charging": {
        "name": "Charging"
      }
    }
  }
}
